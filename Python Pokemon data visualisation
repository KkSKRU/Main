#required libraries
import pandas as pd #analysis
import matplotlib.pyplot as plt #visualization

pokemon_df=pd.read_csv('/content/Pokemon.csv')
pokemon_df.head(n=10)

pokemon_df.sample(5)

#how many rows and columns are in this data
rows, columns = pokemon_df.shape
print(f'Number of rows is {rows}, number of columns is {columns}')

#how many unique pokemon names are in this table
unique_names = pokemon_df['Name'].nunique()
unique_names

#how manypokemons hava attack greater than 100
attack_greater_than_100 = pokemon_df[pokemon_df['Attack'] > 100]
print(len(attack_greater_than_100))

#how many pokemons have defense greater than 100
#how many pokemon have defence greater than 100
defense_greater_than_100 = pokemon_df[pokemon_df['Defense'] > 100]
print(len(defense_greater_than_100))

#how many pokemons have both
attack_defense_greater_than_100 = pokemon_df[(pokemon_df['Attack'] > 100) & (pokemon_df['Defense'] > 100)]
print(len(attack_defense_greater_than_100))

#value counts! create a grouped dataframe that counts the number of pokemons in each group for type 1
type1_pokemons = pokemon_df['Type 1'].value_counts().reset_index()
print(type1_pokemons)

#Bar chart

type1_pokemons.plot(x = 'Type 1', y = 'count', kind = 'bar', color='white', edgecolor='black')
plt.title('Pokemon count by Type 1')
plt.xlabel('Type 1')
plt.ylabel('Count of Pokemons')

#which pokemon has the biggest attack
pokemon_df['Attack'].max()#highest value of attack
pokemon_df['Attack'].idxmax()#index of the highest value
highest_attack = pokemon_df['Name'].iloc[pokemon_df['Attack'].idxmax()]
print('Pokemon with the highest attack is:', highest_attack)

#adding a column
pokemon_df['My unique column'] = 'Pokemon'
pokemon_df
#adding calculated column
pokemon_df['Attack_Defense'] = pokemon_df['Attack'] + pokemon_df['Defense']
#quick math calculations
pokemon_df['Attack'].sum()
pokemon_df['Attack'].max()
pokemon_df['Attack'].min()
pokemon_df['Attack'].mean()

#adding a column
pokemon_df['My unique column'] = 'Pokemon'
#adding calculated column
pokemon_df['Attack_Defense'] =  pokemon_df['Attack'] + pokemon_df['Defense']
# quick math calculations
pokemon_df['Attack'].sum()
pokemon_df['Attack'].min()
pokemon_df['Attack'].max()
pokemon_df['Attack'].mean() #the average
pokemon_df['Attack above average'] = pokemon_df['Attack'] > pokemon_df['Attack'].mean()
pokemon_df

#removing a column
pokemon_df.shape
pokemon_df = pokemon_df.drop(columns=['My unique column'])
pokemon_df.shape

"""HISTOGRAM"""

#analyse total for each pokemon
plt.hist(pokemon_df['Total'], color='green', edgecolor='black', alpha=0.7)
plt.xlabel('Total')
plt.ylabel('Number of pokemons(Frequency)')
#avh line
plt.axvline(pokemon_df['Total'].mean(), linestyle='dashed', color='grey')

#minimum line
plt.axvline(pokemon_df['Total'].min(), linestyle = 'dashed', color = 'pink')
#maximum line
plt.axvline(pokemon_df['Total'].max(), linestyle = 'dashed', color = 'blue')

plt.grid(linestyle='--', alpha=0.7)

value = plt.hist(pokemon_df['Total'], bins =3, color='green', edgecolor='black', alpha=0.7)
hist_values = value[0]
bin_edges = value[1]
print('Histogram counts:', hist_values)
print('Bin edges', bin_edges)

#value_counts how can we calculate the same histogram with value counts
pokemon_df['Total'].value_counts(bins=[179, 379, 579, 781])
(pokemon_df['Total']>579).sum()

pokemon_df.hist(column='Total', by='Legendary', bins=3)

"""To complete the tasks use 'pokemon.csv' dataset

Answer the following questions:

1.How many Pokémons are with 'Type 1' == Water as a % of total?

2.What is the maximum 'Speed' value? What is the minimum 'Speed' value? What is the difference between max and min 'Speed'?

3.Filter the DataFrame to include only the Pokémon with 'Speed' >= 80. How many Pokémon meet this criterion? Display this DataFrame using your preferred visualization method.

4.(DIFFICULT) Find Pokémon with the longest name (excluding spaces)? What is this pokemons name?
"""

#required libraries
import pandas as pd
import matplotlib.pyplot as plt

#read file
df = pd.read_csv('/content/Pokemon.csv')

#total amount and water amount of pokemons
total_pokemon = len(df)
water_pokemon = len(df[df['Type 1'] == 'Water'])

#percentage calculation and rounding
percentage_water = round((water_pokemon / total_pokemon) * 100)

#visualise in percentage
print(f"{percentage_water}%")

#max and min speeds
max_speed = df['Speed'].max()
min_speed = df['Speed'].min()

#calculating difference
speed_difference = max_speed - min_speed

#display
print(f"Maximum Speed: {max_speed}")
print(f"Minimum Speed: {min_speed}")
print(f"Difference between Maximum and Minimum Speed: {speed_difference}")

#pokemons with speed greater or equal to 80
fast_pokemon_df = df[df['Speed'] >= 80]

#amount of above vs below 80 speed pokemons
num_fast_pokemon = len(fast_pokemon_df)
num_slow_pokemon = total_pokemon - num_fast_pokemon

#pie chart data
sizes = [num_fast_pokemon, num_slow_pokemon]
labels = ['Speed >= 80', 'Speed < 80']
colors = ['teal', 'lightgrey']

#display pie chart
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors, startangle=140)
plt.title('Amount of Pokemons That Have Speed Equal and Above 80 in Percentage.')
plt.show()
print(f"Number of pokemons with speed greater than, or equal to 80: {num_fast_pokemon}")
print(f"Total amount of pokemons: {total_pokemon}")
