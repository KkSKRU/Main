# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OyfirFXyeyBDRYCh_LNe6TE6vRTP3yBI
"""

#PANDAS
#MATPLOTLIB library
#from synthetic data

# data from https://allisonhorst.github.io/palmerpenguins/

import matplotlib.pyplot as plt
import numpy as np

species = ("Adelie", "Chinstrap", "Gentoo")
penguin_means = {
    'Bill Depth': (18.35, 18.43, 14.98),
    'Bill Length': (38.79, 48.83, 47.50),
    'Flipper Length': (189.95, 195.82, 217.19),
}

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in penguin_means.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Length (mm)')
ax.set_title('Penguin attributes by species')
ax.set_xticks(x + width, species)
ax.legend(loc='upper left', ncols=3)
ax.set_ylim(0, 250)

plt.show()

# Sample data representing the average temperature (in degrees Celsius) from 2010 to 2014
data = {'Year': [2010, 2011, 2012, 2013, 2014],
        'Avg_Temperature': [14.1, 14.3, 14.5, 14.2, 14.6]}

import pandas as pd
import matplotlib.pyplot

df = pd.DataFrame(data)
df

#ploting
# Sample data representing the average temperature (in degrees Celsius) from 2010 to 2014
data = {'Year': [2010, 2011, 2012, 2013, 2014],
        'Avg_Temperature': [14.1, 14.3, 14.5, 14.2, 14.6]}
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame(data)
df
# VERSION ONE

plt.plot(df['Year'], df['Avg_Temperature'], marker='o') #plot and points

plt.title('Average temperature from 2010 to 2014') # title for chart

plt.xlabel('Year') #title on x axis
plt.ylabel('Temperature')# title on y axis

plt.xticks(df['Year']) #year values rounded
plt.grid(True) #show grid in background

#VERSION TWO
df.plot(x='Year', y='Avg_Temperature', kind='line') # can't use same title /line that is different
plt.title('Average temperature from 2010 to 2014') # title for chart

plt.xlabel('Year') #title on x axis
plt.ylabel('Temperature')# title on y axis

plt.xticks(df['Year']) #year values rounded
plt.grid(True) #show grid in background

#BAR CHART

plt.bar(df['Year'], df['Avg_Temperature'], color='skyblue') #color selected by you
plt.title('Avg temperature from 2010 to 2014')
plt.xlabel('Year')
plt.ylabel('Temerature')

#horizontal bar chart
plt.barh(df['Year'], df['Avg_Temperature'], color='orange') #color selected by you
plt.title('Avg temperature from 2010 to 2014')
plt.xlabel('Temperature')
plt.ylabel('Year')

#histogram - presents the distributon of a single variable, frequency, represents numerical data
data2 = {'Scores' : [85, 92, 78, 20, 89, 90, 82, 56, 60, 23, 90, 40, 77]}
df2 = pd.DataFrame(data2)
df2

plt.hist(df2['Scores'], bins=5, color='green', edgecolor='black')

#scatter plot - used to visualise the relationship between two variables

data3 = {'x':[1,2,3,5,5,2], 'y':[5,8,7,4,9,5]}
df3 = pd.DataFrame(data3)
df3

plt.scatter(x= df3['x'], y=df3['y'])
plt.title('Scatter Plot')

# PIE CHART - represents parts of a whole

data4 = {'Category': ['A', 'B', 'C', 'D'], 'Values': [15, 30, 25, 40]}
df4 = pd.DataFrame(data4)
df4

plt.pie(df4['Values'], labels = df4['Category'], autopct='%1.1f%%')
plt.title('Pie Chart')
plt.show()

# box plot - distribution of dataset and identifies outliers
plt.boxplot(df4['Values'])
plt.grid(True)
plt.show()

df4

#value count
dataset = pd.read_csv('/content/transaction_dataset.csv') #reading the file
dataset.head() #looking at first values

dataset.info()

#value counts -how many times a value repeats? Work on series -thats why we need to define a column

dataset['Category'].value_counts()

dataset['Gender'].value_counts(dropna=False).reset_index() #to also see NaN values

"""Start with Task 1 and proceed further as complexity will increase:
To complete the tasks use 'transaction_dataset.csv'
Task 1: Create a bar chart that shows the count of customers for each unique value in the 'Gender' column (including NaN values). -
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/transaction_dataset.csv')

gender_counts = df['Gender'].value_counts(dropna=False)
plt.figure(figsize=(8, 6))
gender_counts.plot(kind='bar')
plt.title('Count of Customers by Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()